//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game_key")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub game_id: i32,
    pub platform_id: i32,
    pub value: String,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub keystate: String,
    pub page_link: Option<String>,
    pub create_date: DateTimeUtc,
    pub create_user_id: i64,
    pub modify_date: Option<DateTimeUtc>,
    pub modify_user_id: Option<i64>,
    pub notes: Option<String>,
    pub expiration_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game::Entity",
        from = "Column::GameId",
        to = "super::game::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Game,
    #[sea_orm(
        belongs_to = "super::platform::Entity",
        from = "Column::PlatformId",
        to = "super::platform::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Platform,
}

impl Related<super::game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Game.def()
    }
}

impl Related<super::platform::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Platform.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
