//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "keylist_key")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub keylist_id: i32,
    pub gamekey_id: Option<i32>,
    pub create_date: String,
    pub create_user_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game_key::Entity",
        from = "Column::KeylistId",
        to = "super::game_key::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GameKey,
    #[sea_orm(
        belongs_to = "super::keylist::Entity",
        from = "Column::KeylistId",
        to = "super::keylist::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Keylist,
}

impl Related<super::game_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameKey.def()
    }
}

impl Related<super::keylist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Keylist.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
